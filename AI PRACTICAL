1.	N Queen Problem
global N
N = 4

def printSolution(board):
	for i in range(N):
		for j in range(N):
			print (board[i][j],end=' ')
		print()

def isSafe(board, row, col):


	for i in range(col):
		if board[row][i] == 1:
			return False


	for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
		if board[i][j] == 1:
			return False


	for i, j in zip(range(row, N, 1), range(col, -1, -1)):
		if board[i][j] == 1:
			return False

	return True

def solveNQUtil(board, col):

	if col >= N:
		return True

	for i in range(N):

		if isSafe(board, i, col):
			
			board[i][col] = 1

			if solveNQUtil(board, col + 1) == True:
				return True


			board[i][col] = 0


	return False


def solveNQ():
	board = [ [0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0]
			]

	if solveNQUtil(board, 0) == False:
		print ("Solution does not exist")
		return False

	printSolution(board)
	return True
solveNQ()


2.	Water Jug Problem
j1=0
j2=0
x=4;
y=3;
print("initial state= (0,0)");
print("capacities= (4,3)");
print("goal state= (2,0 or any number)");

while j1!=2:
    r=int(input("enter the rule:"));
    if(r==1):
        j1=x;
    elif(r==2):
        j2=y
    elif(r==3):
        j1=0;
    elif(r==4):
        j2=0;
    elif(r==5):
        t=y-j2;
        j2=y;
        j1-=t
        if j1<0:
            j1=0
    elif(r==6):
        t=x-j1;
        j1=x
        j2-=t;
        if j2<0:
            j2=0;
    elif(r==7):
        j2+=j1;
        j1=0;
        if j2>y:
            j2=y;
    elif(r==8):
        j1+=j2;
        j2=0;
        if j1>x:
            j1=x;
    print(j1,j2)


3.	IDDFS
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': [],
    'E': [],
    'F': [],
    'G': []
}

nodes_visited_in_level = {}
current_level = -1

def dfs(node, goal, depth_limit, start, visited, path):
    global current_level

    if start == depth_limit:
        current_level = current_level + 1
        nodes_visited_in_level[current_level] = []

    nodes_visited_in_level[current_level].append(node)

    if node == goal:
        return "FOUND", path + [node]
    elif depth_limit == 0:
        return "NOT_FOUND", None
    else:
        visited.add(node)
        for child in graph[node]:
            if child not in visited:
                result, traversed_path = dfs(child, goal, depth_limit - 1, start, visited, path + [node])
                if result == "FOUND":
                    return "FOUND", traversed_path
        return "NOT_FOUND", None


def iddfs(root,goal):
    depth_limit = 0
    while True:
        visited = set()
        start = depth_limit
        result, traversed_path = dfs(root,goal,depth_limit,start,visited, [])
        if result == "FOUND":
            return "Goal node found! Shortest Traversed path: " + ' -> '.join(traversed_path)
        elif result == "NOT_FOUND":
            depth_limit += 1

root = input('Enter the start node: ')
goal = input('Enter the goal node: ')
result = iddfs(root,goal)

for level, nodes in nodes_visited_in_level.items():
    print("Depth Limit: " + str(level) + " Traversed path: ", end="")
    for node in nodes:
        print(node, end="")
        if node != nodes[-1]:
            print(" -> ", end="")
    print()

print(result)


4.	Tower of Hanoi

def TowerOfHanoi(n, from_rod, to_rod, aux_rod): 
	if n == 0: 
		return
	TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) 
	print("Move disk", n, "from rod", from_rod, "to rod", to_rod) 
	TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) 


N=int(input("Enter the no of ring:"))

TowerOfHanoi(N, 'A', 'C', 'B')
